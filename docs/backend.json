{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the UrbanResilienceAI application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "username": {
          "type": "string",
          "description": "The username of the user.  Must be unique."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "registrationDate": {
          "type": "string",
          "description": "The date and time the user registered.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "registrationDate"
      ]
    },
    "StrategyHistory": {
      "title": "Strategy History",
      "type": "object",
      "description": "Represents a single generated climate strategy plan for a user.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The UID of the user who generated this plan."
        },
        "city": {
          "type": "string",
          "description": "The city for which the plan was generated."
        },
        "strategies": {
          "type": "string",
          "description": "A JSON string of the full GenerateClimateResilientStrategiesOutput."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the plan was created."
        }
      },
      "required": ["userId", "city", "strategies", "createdAt"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Uses path-based ownership for access control.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, corresponding to their Firebase Authentication UID."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/history/{historyId}",
        "definition": {
          "entityName": "StrategyHistory",
          "schema": {
            "$ref": "#/backend/entities/StrategyHistory"
          },
          "description": "Stores a user's previously generated climate strategy plans."
        }
      }
    ],
    "reasoning": "This design prioritizes user authentication and data storage for the UrbanResilienceAI application. Given the primary need for user login/signup, we focus on securely storing user data. The design emphasizes clarity and security, aligning with the core design principles of Authorization Independence, Clarity of Intent, DBAC (Database Authenticated Control), and QAPs (Rules are not Filters).  Since only User data is provided, the design is simplified.\n\n*   **Authorization Independence:** The `/users/{userId}` path inherently provides authorization independence.  Security rules can directly check if `request.auth.uid == userId` without needing to read any other data. No denormalization is needed at this stage, as there are no subcollections or child documents with dependencies on the User document's attributes. This trivially satisfies Authorization Independence and enables atomic operations.\n*   **Structural Segregation:** User data with different access requirements is already segregated by virtue of the path-based ownership. Each user's data is stored under their unique ID, automatically segregating it from other users' data.\n*   **Access Modeling:** Path-Based Ownership is used for `/users/{userId}`.  This ensures that only the authenticated user can access their own data. No membership maps are required at this stage.\n*   **Data Clarity and Predictability:** The `User` schema enforces a predictable schema. Fields are explicitly defined, ensuring that data is consistent and easy to understand.  The `userId` path parameter is descriptive and semantic.\n*   **QAPs:** The structure supports secure `list` operations on the `/users` collection (if needed for admin purposes). Rules can limit listing to admin users or impose other restrictions without needing to filter based on document content.\n\nGiven the future app requirements to store data related to Urban Vulnerability Index, Ecosystem Service Modeler, and Climate-Resilient Strategies, future data structures should consider path-based ownership or membership models for collaborative or shared access."
  }
}
