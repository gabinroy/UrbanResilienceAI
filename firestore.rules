/**
 * @description This ruleset enforces a strict user-ownership model for the /users/{userId} collection.
 * All data is nested under /users/{userId}, ensuring only the authenticated user can access their own data.
 *
 * Core Philosophy: Strict user-ownership, with each user having exclusive access to their profile data.
 * Data Structure: Data for each user is stored under /users/{userId}, where {userId} corresponds to the Firebase Auth UID.
 * Key Security Decisions: Listing all users is explicitly denied to prevent information leakage.
 *
 * Pattern Choice Justification:
 * Path-Based Ownership: The /users/{userId} path structure inherently provides authorization independence,
 * ensuring security rules can directly check if request.auth.uid == userId without needing to read any other data.
 *
 * Denormalization for Authorization:
 * Not needed at this stage, as the path-based ownership model directly links the user's UID to their document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual user documents. Only the authenticated user can read or write their own document.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own document with matching userId.
     * @allow (get) - Authenticated user reads their own document.
     * @allow (update) - Authenticated user updates their own document.
     * @allow (delete) - Authenticated user deletes their own document.
     * @deny (create) - Authenticated user tries to create a document with a userId that doesn't match their own.
     * @deny (get) - Authenticated user tries to read another user's document.
     * @deny (update) - Authenticated user tries to update another user's document.
     * @deny (delete) - Authenticated user tries to delete another user's document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner of the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the request is made by the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own document if the userId matches their auth UID
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allow the user to get their own document
      allow get: if isOwner(userId);

      // Allow the user to list their own documents (if needed)
      allow list: if isOwner(userId);

      // Allow the user to update their own document
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own document
      allow delete: if isExistingOwner(userId);
    }
  }
}