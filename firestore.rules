/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and their strategy history.
 * @dataStructure
 *  - /users/{userId}: Stores user profile information, accessible only to the user with the matching UID.
 *  - /users/{userId}/history/{historyId}: Stores climate strategy plans generated by a user, accessible only to that user.
 * @keySecurityDecisions
 *  - Users can only access their own profile data and strategy history.
 *  - Listing all users is disallowed for security reasons.
 *  - Data validation is limited to ensuring the user ID matches the document path.
 * @denormalizationForAuthorization None:  The path-based ownership model avoids the need for denormalization. The `userId` is present in both the path and the document, allowing direct authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile for user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile for user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner of the user document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own document
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to get their own document
      allow get: if isOwner(userId);

      // Prevent listing all users
      allow list: if false;

      // Allow the user to update their own document
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own document
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to a user's strategy history documents.
     * @path /users/{userId}/history/{historyId}
     * @allow (create) User with UID 'user123' can create a strategy history entry for themselves.
     * @allow (get) User with UID 'user123' can read a strategy history entry they own.
     * @allow (list) User with UID 'user123' can list their own strategy history entries.
     * @deny (create) User with UID 'user456' cannot create a strategy history entry for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update a strategy history entry for user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a strategy history entry for user 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/history/{historyId} {
      // Helper function to check if the request is made by the owner of the user document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the owner to create a history document
      allow create: if isOwner(userId);

      // Allow the owner to get a history document
      allow get: if isOwner(userId);

      // Allow the owner to list their history documents
      allow list: if isOwner(userId);

      // Allow the owner to update their own document
      allow update: if isOwner(userId) && resource != null;

      // Allow the owner to delete their history document
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}