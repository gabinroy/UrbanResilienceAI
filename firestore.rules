/**
 * @file Firestore Security Rules for UrbanResilienceAI.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model, ensuring that only authenticated users can access their own data. Data validation is relaxed for rapid prototyping.
 * @data_structure All user data is nested under `/users/{userId}`, with strategy history stored in subcollections under each user.
 * @key_security_decisions Users can only access their own profile and strategy history. Listing of all users is disallowed.
 * @denormalization No denormalization is required at this stage, as the data model uses path-based ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document at /users/user123 if the document.id matches their UID.
     * @allow (get) User with UID 'user123' can retrieve their profile document at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile document at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile document at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile document at /users/user456.
     * @deny (get) User with UID 'user123' cannot retrieve the profile document at /users/user456.
     * @deny (update) User with UID 'user123' cannot update the profile document at /users/user456.
     * @deny (delete) User with UID 'user123' cannot delete the profile document at /users/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verifies that the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Verifies that the requested userId matches the authenticated user's uid
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Verifies that the user is signed in and is the owner of the account and that the resource exists.
      function isExistingOwner(userId) {
        return (isSignedIn() && isOwner(userId) && resource != null);
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutable user ID
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to strategy history documents for a specific user.
     * @path /users/{userId}/history/{historyId}
     * @allow (create) User with UID 'user123' can create a history document under /users/user123/history.
     * @allow (get) User with UID 'user123' can retrieve a history document under /users/user123/history.
     * @allow (update) User with UID 'user123' can update a history document under /users/user123/history.
     * @allow (delete) User with UID 'user123' can delete a history document under /users/user123/history.
     * @deny (create) User with UID 'user123' cannot create a history document under /users/user456/history.
     * @deny (get) User with UID 'user123' cannot retrieve a history document under /users/user456/history.
     * @deny (update) User with UID 'user123' cannot update a history document under /users/user456/history.
     * @deny (delete) User with UID 'user123' cannot delete a history document under /users/user456/history.
     * @principle Restricts access to a user's own strategy history.
     */
    match /users/{userId}/history/{historyId} {
      // Verifies that the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Verifies that the requested userId matches the authenticated user's uid
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Verifies that the user is signed in and is the owner of the account and that the resource exists.
      function isExistingOwner(userId) {
        return (isSignedIn() && isOwner(userId) && resource != null);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId); // Owner can list their own history.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}