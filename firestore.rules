/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for the UrbanResilienceAI application.
 * All data is nested under `/users/{userId}`, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information.
 * - `/users/{userId}/history/{historyId}`: Stores climate strategy history for a specific user.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing all users is not allowed.
 * - Write access to a user's data is restricted to the user themselves.
 *
 * @note Denormalization is not needed at this stage as the data structure already supports path-based ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root match to prevent general collection access. All access must be done through specified paths.
     * @path /
     * @allow (get, list, create, update, delete): Never. This is a root-level catch-all.
     * @deny (get, list, create, update, delete): Always, as this is a root match.
     * @principle Prevents open access.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get): If the authenticated user's ID matches the userId.
     * @allow (list): Never. User listing is disallowed.
     * @allow (create): If the authenticated user's ID matches the userId.
     * @allow (update): If the authenticated user's ID matches the userId and the document exists.
     * @allow (delete): If the authenticated user's ID matches the userId and the document exists.
     * @deny (get): If the authenticated user's ID does not match the userId.
     * @deny (create): If the authenticated user's ID does not match the userId.
     * @deny (update): If the authenticated user's ID does not match the userId or the document does not exist.
     * @deny (delete): If the authenticated user's ID does not match the userId or the document does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for strategy history documents.
     * @path /users/{userId}/history/{historyId}
     * @allow (get): If the authenticated user's ID matches the userId.
     * @allow (list): If the authenticated user's ID matches the userId.
     * @allow (create): If the authenticated user's ID matches the userId.
     * @allow (update): If the authenticated user's ID matches the userId and the document exists.
     * @allow (delete): If the authenticated user's ID matches the userId and the document exists.
     * @deny (get): If the authenticated user's ID does not match the userId.
     * @deny (list): If the authenticated user's ID does not match the userId.
     * @deny (create): If the authenticated user's ID does not match the userId.
     * @deny (update): If the authenticated user's ID does not match the userId or the document does not exist.
     * @deny (delete): If the authenticated user's ID does not match the userId or the document does not exist.
     * @principle Enforces document ownership for writes within a user's data tree.
     */
    match /users/{userId}/history/{historyId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}