/**
 * @fileOverview Firestore Security Rules for UrbanResilienceAI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for accessing user profiles and their associated strategy history.
 * Each user can only read and write their own data, preventing unauthorized access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Access is restricted to the owning user.
 * - /users/{userId}/history/{historyId}: Stores strategy history for each user. Access is restricted to the owning user.
 *
 * Key Security Decisions:
 * - Users can only create their own user document (self-registration).
 * - Listing of users is denied to prevent unauthorized enumeration.
 * - Strategy history is accessible only to the user who owns it.
 *
 * Denormalization for Authorization:
 * - The `userId` is embedded in both the user document path and the strategy history documents to enable simple authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that all requests originate from a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the specified user ID.
     * @param {string} userId - The user ID to check against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     * @example isOwner('user123') returns true if request.auth.uid is 'user123'.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user123' can create a user document where userId is 'user123'.
     * @allow (get, update, delete) - Authenticated user with UID 'user123' can get, update, or delete their own user document ('user123').
     * @deny (create) - Authenticated user with UID 'user456' cannot create a user document where userId is 'user123'.
     * @deny (get, update, delete) - Authenticated user with UID 'user456' cannot get, update, or delete the user document of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/history/{historyId} collection.
     * @path /users/{userId}/history/{historyId}
     * @allow (create, get, list, update, delete) - Authenticated user with UID 'user123' can create, get, list, update, or delete history documents under their own user document ('user123').
     * @deny (create, get, list, update, delete) - Authenticated user with UID 'user456' cannot create, get, list, update, or delete history documents under the user document of 'user123'.
     * @principle Restricts access to a user's own strategy history.
     */
    match /users/{userId}/history/{historyId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}