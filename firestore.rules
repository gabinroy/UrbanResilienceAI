/**
 * @description This ruleset enforces a strict user-ownership model for the UrbanResilienceAI application.
 * All user data and associated strategy history are stored under the /users/{userId} path.
 * @dataStructure
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /users/{userId}/history/{historyId}: Stores climate strategy plans generated by the user, also accessible only by the user.
 * @keySecurityDecisions
 * - Users can only access their own data. Listing of all users is disallowed.
 * - Data under a user's path is considered private and requires authentication.
 * @denormalizationForAuthorization
 * - The userId is embedded in the path for both the user document and the strategy history documents, allowing for simple ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile. The 'id' field must match the authenticated user's UID.
     * @allow (get) - Authenticated user retrieves their own profile.
     * @allow (update) - Authenticated user updates their own profile.
     * @allow (delete) - Authenticated user deletes their own profile.
     * @deny (create) - User attempts to create a profile with an 'id' that doesn't match their UID.
     * @deny (get) - User attempts to retrieve another user's profile.
     * @deny (update) - User attempts to update another user's profile.
     * @deny (delete) - User attempts to delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to a user's strategy history documents.
     * @path /users/{userId}/history/{historyId}
     * @allow (create) - Authenticated user creates a history document under their own user ID.
     * @allow (get) - Authenticated user retrieves their own history document.
     * @allow (update) - Authenticated user updates their own history document.
     * @allow (delete) - Authenticated user deletes their own history document.
     * @deny (create) - User attempts to create a history document under another user's ID.
     * @deny (get) - User attempts to retrieve another user's history document.
     * @deny (update) - User attempts to update another user's history document.
     * @deny (delete) - User attempts to delete another user's history document.
     * @principle Enforces document ownership for all operations within the user's history collection.
     */
    match /users/{userId}/history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}