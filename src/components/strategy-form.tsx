'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { useTransition } from 'react';

import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { getStrategies } from '@/app/actions';
import { type GenerateClimateResilientStrategiesOutput } from '@/ai/flows/generate-climate-resilient-strategies';
import { BrainCircuit } from 'lucide-react';

const formSchema = z.object({
  city: z.string().min(2, 'Please provide a valid city name.'),
  cityOverview: z.string().optional(),
});

interface StrategyFormProps {
  setIsLoading: (isLoading: boolean) => void;
  onResult: (data: GenerateClimateResilientStrategiesOutput | null, error: string | null, notification: string | null) => void;
}

export default function StrategyForm({ setIsLoading, onResult }: StrategyFormProps) {
  const [isPending, startTransition] = useTransition();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      city: '',
      cityOverview: '',
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    startTransition(async () => {
      const result = await getStrategies(values);
      onResult(result.data, result.error, result.notification);
      setIsLoading(false);
    });
  }

  return (
    <Card className="sticky top-24">
      <CardHeader>
        <CardTitle className="font-headline text-lg">Generate Strategies</CardTitle>
        <CardDescription>
          Describe your city to generate custom climate-resilient strategies.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="city"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>City</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="e.g., 'New York', 'Tokyo'"
                      {...field}
                    />
                  </FormControl>
                  <FormDescription>
                    The city for which to generate strategies.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="cityOverview"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>City Overview (Optional)</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="e.g., 'Coastal city with a population of 2 million, facing rising sea levels and frequent heatwaves...'"
                      className="min-h-[150px] resize-y"
                      {...field}
                    />
                  </FormControl>
                  <FormDescription>
                    Provide your own overview, or leave blank to have one generated by AI based on the city's climate data.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" className="w-full" disabled={isPending}>
              {isPending ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-foreground mr-2"></div>
                  Generating...
                </>
              ) : (
                <>
                  <BrainCircuit className="mr-2 h-4 w-4" />
                  Generate with AI
                </>
              )}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
